@page "/menu/{PizzaName}"
@using System.Text.Json
@inject ProtectedSessionStorage ProtectedSessionStore
@inject StateContainer StateContainer
@implements IDisposable
<h3>MenuComponent</h3>
@if (PizzaInfo == null)
{
    <div>loading...</div>
}
else
{
    <div class="container-fluid">
        <div class="row ">
            <div class="col-6" style="background-color:pink">
                <img class="img-fluid" src="@PizzaInfo.Type.Where(t=>t.TypeName==PizzaName).FirstOrDefault().Image" />
            </div>

            <div class="col-6" style="background-color:cornflowerblue">
                <p class="display-4 text-center">Size</p>
                <div class="container">
                    <div class="row">
                        <div class="btn-group-toggle" data-toggle="buttons">
                            @foreach (var size in PizzaInfo.Size)
                            {
                                <label class="btn btn-secondary @((SelectedSize.SizeId==size.SizeId)?"active":"")">
                                    <input type="radio" class="btn btn-outline-success" checked @bind="size.SizeId" @onclick="((e)=>SelectionChanged(size))">
                                    @size.SizeName
                                    <br />
                                    $@size.SizePrice
                                </label>
                            }
                        </div>
                    </div>
                </div>

                @if (PizzaName == "Custom")
                {
                    <p class="display-4 text-center">Toppings</p>
                    <div class="container">
                        <div class="row">
                            <div class="btn-group-toggle" data-toggle="buttons">
                                @foreach (var topping in PizzaInfo.Topping)
                                {
                                    <label class="btn btn-secondary @(SelectedTopping.Contains(topping.ToppingId)?"active":"")">
                                        <input type="checkbox" @bind="topping.ToppingId" @onclick="((e)=>handleClick(topping))" />
                                        @topping.ToppingName
                                        <br />
                                        + $@topping.ToppingPrice
                                    </label>
                                }
                            </div>
                        </div>
                    </div>
                }

                <p class="display-4 text-center">Summary</p>
                Subtotal : $@SubtotalPrice
                <br />
                Tax : $@( Math.Round(SubtotalPrice * 0.13,2) )
                <hr />
                Order Total : $@TotalPrice

            </div>
        </div>
        <div class="display-2">
            <button type="button" class="btn btn-primary" @onclick="AddItem">Add to Cart</button>
            <button type="button" class="btn btn-primary">Proceed Checkout</button>
        </div>


    </div>
}
@code {
    public PizzaInfo PizzaInfo { get; set; }
    [Parameter]
    public string PizzaName { get; set; }


    private List<int> SelectedTopping { get; set; } = new List<int>();

    private void handleClick(Entities.Topping item)
    {
        if (SelectedTopping.Contains(item.ToppingId))
        {
            SelectedTopping.Remove(item.ToppingId);
        }
        else
        {
            SelectedTopping.Add(item.ToppingId);
        }
        UpdatePrice();
    }

    private Entities.Size SelectedSize { get; set; }
    private void SelectionChanged(Entities.Size size)
    {
        SelectedSize = size;
        UpdatePrice();
    }

    private float TotalPrice { get; set; }
    private float TaxPrice { get; set; }
    private float SubtotalPrice { get; set; }
    private void UpdatePrice()
    {
        SubtotalPrice = SelectedSize.SizePrice + SelectedTopping.Aggregate(0f, (total, next) => total + PizzaInfo.Topping.Where(d => d.ToppingId == next).FirstOrDefault().ToppingPrice);
        TaxPrice = (float)Math.Round(SubtotalPrice * 0.13, 2);
        TotalPrice = (float)Math.Round(SubtotalPrice + TaxPrice, 2);


    }



    private async Task AddItem()
    {
        var items = StateContainer.Items;
        Item item = new Item
        {
            ItemId = new Guid(),
            SizeId = SelectedSize.SizeId,
            TypeId = PizzaInfo.Type.Where(o => o.TypeName == PizzaName).FirstOrDefault().TypeId,
            ToppingId = SelectedTopping.ToArray(),
            Subtotal = SubtotalPrice,
            Tax = (float)Math.Round(SubtotalPrice * 0.13, 2),
            Total = TotalPrice
        };
        items.Add(item);

        StateContainer.SetItems(items);
        StateContainer.SetSubTotal((float)Math.Round(StateContainer.SubTotal + SubtotalPrice, 2));
        StateContainer.SetTax((float)Math.Round(StateContainer.Tax + TaxPrice, 2));
        StateContainer.SetTotal((float)Math.Round(StateContainer.Total + TotalPrice, 2));

    }



    protected async override Task OnInitializedAsync()
    {
        @*var result = await ProtectedSessionStore.GetAsync<PizzaInfo>("PizzaInfo");
            PizzaInfo = result.Success ? result.Value : null;
            SelectedSize = PizzaInfo.Size.First();*@
        PizzaInfo = StateContainer.PizzaInfo;
        SelectedSize = PizzaInfo.Size.First();
        UpdatePrice();

        StateContainer.OnChange += StateHasChanged;
    }


    public void Dispose()
    {
        StateContainer.OnChange -= StateHasChanged;
    }
}
