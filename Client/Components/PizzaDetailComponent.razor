@page "/menu/{PizzaName}"
@using Client.Models
@using System.Text.Json
<h3>MenuComponent</h3>
@if (PizzaInfo == null)
{
    <div>loading...</div>
}
else
{
    <div class="container-fluid">
        <div class="row " >
            <div class="col-6" style="background-color:pink">
                <img class="img-fluid" src="@PizzaInfo.Type.Where(t=>t.TypeName==PizzaName).FirstOrDefault().Image" />
            </div>

            <div class="col-6" style="background-color:cornflowerblue">
                <p class="display-4 text-center">Size</p>
                <div class="container">
                    <div class="row">
                        <div class="btn-group-toggle" data-toggle="buttons">
                            @foreach (var size in PizzaInfo.Size)
                            {
                                <label class="btn btn-secondary @((SelectedSize.SizeId==size.SizeId)?"active":"")">
                                    <input type="radio" class="btn btn-outline-success" checked @bind="size.SizeId" @onclick="((e)=>SelectionChanged(size))">
                                    @size.SizeName
                                    <br />
                                    $@size.SizePrice
                                </label>
                            }
                        </div>
                    </div>
                </div>
                <p class="display-4 text-center">Toppings</p>
                <div class="container">
                    <div class="row">
                        <div class="btn-group-toggle" data-toggle="buttons">
                            @foreach (var topping in PizzaInfo.Topping)
                            {
                                <label class="btn btn-secondary @(SelectedTopping.Contains(topping.ToppingId)?"active":"")">
                                    <input type="checkbox" @bind="topping.ToppingId" @onclick="((e)=>handleClick(topping))" />
                                    @topping.ToppingName
                                    <br />
                                    + $@topping.ToppingPrice
                                </label>
                            }
                        </div>
                    </div>
                </div>

                <p class="display-4 text-center">Summary</p>
                Subtotal $@SubtotalPrice
                <br/>
                Tax $@( Math.Round(SubtotalPrice * 0.13,2) )

            </div>
        </div>
        <div class="display-2">
            Order Total : $@TotalPrice
        </div>


    </div>
}
@code {
    public PizzaInfo PizzaInfo { get; set; }
    [Parameter]
    public string PizzaName { get; set; }


    private List<int> SelectedTopping { get; set; } = new List<int>();

    private void handleClick(Entities.Topping item)
    {
        if (SelectedTopping.Contains(item.ToppingId))
        {
            SelectedTopping.Remove(item.ToppingId);
        }
        else
        {
            SelectedTopping.Add(item.ToppingId);
        }
        UpdatePrice();
    }

    private Entities.Size SelectedSize { get; set; }
    private void SelectionChanged(Entities.Size size)
    {
        SelectedSize = size;
        UpdatePrice();

    }

    private double TotalPrice { get; set; }
    private float SubtotalPrice { get; set; }
    private void UpdatePrice()
    {
        SubtotalPrice = SelectedSize.SizePrice + SelectedTopping.Aggregate(0f,(total, next)=>total + PizzaInfo.Topping.Where(d=>d.ToppingId== next).FirstOrDefault().ToppingPrice);
        TotalPrice = Math.Round(Math.Round(SubtotalPrice, 2) + Math.Round(SubtotalPrice*0.13, 2), 2);
    }


    protected async override Task OnInitializedAsync()
    {
        Console.WriteLine("Oninializedasync is called");
        HttpClient _client = new HttpClient();
        //var PizzaInfo = await _client.GetFromJsonAsync<PizzaInfo>("https://localhost:44355/api/pizza");
        var response = await _client.GetAsync("https://localhost:44355/api/pizza");
        var content = await response.Content.ReadAsStringAsync();
        if (!response.IsSuccessStatusCode)
        {
            throw new ApplicationException(content);
        }

        var products = JsonSerializer.Deserialize<PizzaInfo>(content, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
        PizzaInfo = products;
        SelectedSize = products.Size.First();
        UpdatePrice();
    }
}
